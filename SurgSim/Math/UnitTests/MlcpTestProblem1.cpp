// This file is a part of the OpenSurgSim project.
// Copyright 2013, SimQuest Solutions Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/** @file
* A data set for the tests for the MLCP solver.
*/

#include "MlcpTestProblems.h"


static void setProblemInputs(Eigen::MatrixXd* HCHt, Eigen::VectorXd* E, Eigen::VectorXd* mu,
                             std::vector<MLCP_Constraint>* constraintTypes)
{
	const int size = 16;

	HCHt->resize(size, size);
	(*HCHt)( 0, 0) = 1.3345657526376539e-008;
	(*HCHt)( 0, 1) = 1.4762129451361012e-012;
	(*HCHt)( 0, 2) = 1.3021510888275589e-009;
	(*HCHt)( 0, 3) = -3.1071425782284856e-008;
	(*HCHt)( 0, 4) = -5.6308255099272961e-011;
	(*HCHt)( 0, 5) = 0;
	(*HCHt)( 0, 6) = 0;
	(*HCHt)( 0, 7) = 0;
	(*HCHt)( 0, 8) = 0;
	(*HCHt)( 0, 9) = 0;
	(*HCHt)( 0,10) = 0;
	(*HCHt)( 0,11) = 0;
	(*HCHt)( 0,12) = 0;
	(*HCHt)( 0,13) = 0;
	(*HCHt)( 0,14) = 0;
	(*HCHt)( 0,15) = 0;
	(*HCHt)( 1, 0) = 1.4762129451361044e-012;
	(*HCHt)( 1, 1) = 1.4730637830740187e-008;
	(*HCHt)( 1, 2) = -1.2917016738606647e-012;
	(*HCHt)( 1, 3) = -7.1607792168177411e-016;
	(*HCHt)( 1, 4) = -4.2296549471529904e-012;
	(*HCHt)( 1, 5) = 0;
	(*HCHt)( 1, 6) = 0;
	(*HCHt)( 1, 7) = 0;
	(*HCHt)( 1, 8) = 0;
	(*HCHt)( 1, 9) = 0;
	(*HCHt)( 1,10) = 0;
	(*HCHt)( 1,11) = 0;
	(*HCHt)( 1,12) = 0;
	(*HCHt)( 1,13) = 0;
	(*HCHt)( 1,14) = 0;
	(*HCHt)( 1,15) = 0;
	(*HCHt)( 2, 0) = 1.3021510888275589e-009;
	(*HCHt)( 2, 1) = -1.2917016738606573e-012;
	(*HCHt)( 2, 2) = 1.350942244549466e-008;
	(*HCHt)( 2, 3) = -3.3089655917465503e-008;
	(*HCHt)( 2, 4) = -5.993834037837092e-011;
	(*HCHt)( 2, 5) = 0;
	(*HCHt)( 2, 6) = 0;
	(*HCHt)( 2, 7) = 0;
	(*HCHt)( 2, 8) = 0;
	(*HCHt)( 2, 9) = 0;
	(*HCHt)( 2,10) = 0;
	(*HCHt)( 2,11) = 0;
	(*HCHt)( 2,12) = 0;
	(*HCHt)( 2,13) = 0;
	(*HCHt)( 2,14) = 0;
	(*HCHt)( 2,15) = 0;
	(*HCHt)( 3, 0) = -3.1071425782284856e-008;
	(*HCHt)( 3, 1) = -7.1607792168177411e-016;
	(*HCHt)( 3, 2) = -3.3089655917465503e-008;
	(*HCHt)( 3, 3) = 7.9109243566832458e-007;
	(*HCHt)( 3, 4) = -2.0914474411210304e-011;
	(*HCHt)( 3, 5) = 0;
	(*HCHt)( 3, 6) = 0;
	(*HCHt)( 3, 7) = 0;
	(*HCHt)( 3, 8) = 0;
	(*HCHt)( 3, 9) = 0;
	(*HCHt)( 3,10) = 0;
	(*HCHt)( 3,11) = 0;
	(*HCHt)( 3,12) = 0;
	(*HCHt)( 3,13) = 0;
	(*HCHt)( 3,14) = 0;
	(*HCHt)( 3,15) = 0;
	(*HCHt)( 4, 0) = -5.6308255099272961e-011;
	(*HCHt)( 4, 1) = -4.2296549471529904e-012;
	(*HCHt)( 4, 2) = -5.993834037837092e-011;
	(*HCHt)( 4, 3) = -2.0914474411210346e-011;
	(*HCHt)( 4, 4) = 7.9999738402362291e-007;
	(*HCHt)( 4, 5) = 0;
	(*HCHt)( 4, 6) = 0;
	(*HCHt)( 4, 7) = 0;
	(*HCHt)( 4, 8) = 0;
	(*HCHt)( 4, 9) = 0;
	(*HCHt)( 4,10) = 0;
	(*HCHt)( 4,11) = 0;
	(*HCHt)( 4,12) = 0;
	(*HCHt)( 4,13) = 0;
	(*HCHt)( 4,14) = 0;
	(*HCHt)( 4,15) = 0;
	(*HCHt)( 5, 0) = 0;
	(*HCHt)( 5, 1) = 0;
	(*HCHt)( 5, 2) = 0;
	(*HCHt)( 5, 3) = 0;
	(*HCHt)( 5, 4) = 0;
	(*HCHt)( 5, 5) = 1.5589983172147443e-008;
	(*HCHt)( 5, 6) = 2.4655681638273228e-010;
	(*HCHt)( 5, 7) = -2.6547210557780089e-010;
	(*HCHt)( 5, 8) = -4.0242767107961668e-010;
	(*HCHt)( 5, 9) = 2.9172027027174455e-008;
	(*HCHt)( 5,10) = -1.4626940755792081e-009;
	(*HCHt)( 5,11) = -8.3546545220688397e-009;
	(*HCHt)( 5,12) = -6.910879572780377e-012;
	(*HCHt)( 5,13) = 1.0076117393553975e-009;
	(*HCHt)( 5,14) = 8.6338319022767194e-009;
	(*HCHt)( 5,15) = -1.2342675099707964e-010;
	(*HCHt)( 6, 0) = 0;
	(*HCHt)( 6, 1) = 0;
	(*HCHt)( 6, 2) = 0;
	(*HCHt)( 6, 3) = 0;
	(*HCHt)( 6, 4) = 0;
	(*HCHt)( 6, 5) = 2.4655681638273228e-010;
	(*HCHt)( 6, 6) = 1.2772429953165537e-008;
	(*HCHt)( 6, 7) = -2.8455178752109829e-010;
	(*HCHt)( 6, 8) = -7.9973379384833891e-011;
	(*HCHt)( 6, 9) = 5.8411815009243883e-009;
	(*HCHt)( 6,10) = -6.474323176106377e-009;
	(*HCHt)( 6,11) = -5.7283661469222675e-010;
	(*HCHt)( 6,12) = -1.0858340296547962e-009;
	(*HCHt)( 6,13) = 6.2702667451699401e-009;
	(*HCHt)( 6,14) = -1.7749942115993248e-009;
	(*HCHt)( 6,15) = -4.3201426346668623e-010;
	(*HCHt)( 7, 0) = 0;
	(*HCHt)( 7, 1) = 0;
	(*HCHt)( 7, 2) = 0;
	(*HCHt)( 7, 3) = 0;
	(*HCHt)( 7, 4) = 0;
	(*HCHt)( 7, 5) = -2.6547210557780094e-010;
	(*HCHt)( 7, 6) = -2.8455178752109829e-010;
	(*HCHt)( 7, 7) = 1.5781997723164011e-008;
	(*HCHt)( 7, 8) = 5.6863004741912405e-010;
	(*HCHt)( 7, 9) = -4.1221084373918575e-008;
	(*HCHt)( 7,10) = 6.434508335504067e-010;
	(*HCHt)( 7,11) = 1.5299613175269497e-010;
	(*HCHt)( 7,12) = -8.7523797506238338e-009;
	(*HCHt)( 7,13) = -1.24204206311367e-009;
	(*HCHt)( 7,14) = -6.5906217261540902e-011;
	(*HCHt)( 7,15) = 8.5224220548311002e-009;
	(*HCHt)( 8, 0) = 0;
	(*HCHt)( 8, 1) = 0;
	(*HCHt)( 8, 2) = 0;
	(*HCHt)( 8, 3) = 0;
	(*HCHt)( 8, 4) = 0;
	(*HCHt)( 8, 5) = -4.0242767107961668e-010;
	(*HCHt)( 8, 6) = -7.9973379384833891e-011;
	(*HCHt)( 8, 7) = 5.6863004741912405e-010;
	(*HCHt)( 8, 8) = 7.9763312499397027e-007;
	(*HCHt)( 8, 9) = 1.1507401561300607e-010;
	(*HCHt)( 8,10) = 3.3984526634410832e-009;
	(*HCHt)( 8,11) = 8.0413593280745838e-009;
	(*HCHt)( 8,12) = -1.1262542833458448e-008;
	(*HCHt)( 8,13) = 3.4590894897356843e-009;
	(*HCHt)( 8,14) = 7.1961798751286384e-009;
	(*HCHt)( 8,15) = -1.0553214707732758e-008;
	(*HCHt)( 9, 0) = 0;
	(*HCHt)( 9, 1) = 0;
	(*HCHt)( 9, 2) = 0;
	(*HCHt)( 9, 3) = 0;
	(*HCHt)( 9, 4) = 0;
	(*HCHt)( 9, 5) = 2.9172027027174455e-008;
	(*HCHt)( 9, 6) = 5.8411815009243883e-009;
	(*HCHt)( 9, 7) = -4.1221084373918575e-008;
	(*HCHt)( 9, 8) = 1.1507401561300607e-010;
	(*HCHt)( 9, 9) = 7.8929265028778233e-007;
	(*HCHt)( 9,10) = -8.7525370098262112e-009;
	(*HCHt)( 9,11) = -2.0706484870371629e-008;
	(*HCHt)( 9,12) = 2.8946431215678211e-008;
	(*HCHt)( 9,13) = 9.6712597799773566e-009;
	(*HCHt)( 9,14) = 2.016714890447026e-008;
	(*HCHt)( 9,15) = -2.951199226885018e-008;
	(*HCHt)(10, 0) = 0;
	(*HCHt)(10, 1) = 0;
	(*HCHt)(10, 2) = 0;
	(*HCHt)(10, 3) = 0;
	(*HCHt)(10, 4) = 0;
	(*HCHt)(10, 5) = -1.4626940755792081e-009;
	(*HCHt)(10, 6) = -6.474323176106377e-009;
	(*HCHt)(10, 7) = 6.434508335504067e-010;
	(*HCHt)(10, 8) = 3.3984526634410832e-009;
	(*HCHt)(10, 9) = -8.7525370098262112e-009;
	(*HCHt)(10,10) = 9.3508899127147559e-005;
	(*HCHt)(10,11) = 6.1061434208882659e-006;
	(*HCHt)(10,12) = -1.0005996410361315e-005;
	(*HCHt)(10,13) = 2.3175132657846745e-005;
	(*HCHt)(10,14) = -5.7725592020145953e-007;
	(*HCHt)(10,15) = -2.6121568520215946e-006;
	(*HCHt)(11, 0) = 0;
	(*HCHt)(11, 1) = 0;
	(*HCHt)(11, 2) = 0;
	(*HCHt)(11, 3) = 0;
	(*HCHt)(11, 4) = 0;
	(*HCHt)(11, 5) = -8.3546545220688397e-009;
	(*HCHt)(11, 6) = -5.7283661469222675e-010;
	(*HCHt)(11, 7) = 1.5299613175269497e-010;
	(*HCHt)(11, 8) = 8.0413593280745838e-009;
	(*HCHt)(11, 9) = -2.0706484870371629e-008;
	(*HCHt)(11,10) = 6.1061434208882693e-006;
	(*HCHt)(11,11) = 9.9502091897911858e-005;
	(*HCHt)(11,12) = 7.7201461732487004e-006;
	(*HCHt)(11,13) = 6.37466867795377e-006;
	(*HCHt)(11,14) = 2.3794026441112229e-005;
	(*HCHt)(11,15) = 5.9700902633940878e-006;
	(*HCHt)(12, 0) = 0;
	(*HCHt)(12, 1) = 0;
	(*HCHt)(12, 2) = 0;
	(*HCHt)(12, 3) = 0;
	(*HCHt)(12, 4) = 0;
	(*HCHt)(12, 5) = -6.910879572780377e-012;
	(*HCHt)(12, 6) = -1.0858340296547962e-009;
	(*HCHt)(12, 7) = -8.7523797506238338e-009;
	(*HCHt)(12, 8) = -1.1262542833458448e-008;
	(*HCHt)(12, 9) = 2.8946431215678211e-008;
	(*HCHt)(12,10) = -1.0005996410361326e-005;
	(*HCHt)(12,11) = 7.7201461732486902e-006;
	(*HCHt)(12,12) = 0.00010300469354547019;
	(*HCHt)(12,13) = 2.0371361118566863e-006;
	(*HCHt)(12,14) = 1.2143141546752772e-005;
	(*HCHt)(12,15) = 1.9538302894163935e-005;
	(*HCHt)(13, 0) = 0;
	(*HCHt)(13, 1) = 0;
	(*HCHt)(13, 2) = 0;
	(*HCHt)(13, 3) = 0;
	(*HCHt)(13, 4) = 0;
	(*HCHt)(13, 5) = 1.0076117393553975e-009;
	(*HCHt)(13, 6) = 6.2702667451699401e-009;
	(*HCHt)(13, 7) = -1.24204206311367e-009;
	(*HCHt)(13, 8) = 3.4590894897356843e-009;
	(*HCHt)(13, 9) = 9.6712597799773566e-009;
	(*HCHt)(13,10) = 2.3175132657846745e-005;
	(*HCHt)(13,11) = 6.37466867795377e-006;
	(*HCHt)(13,12) = 2.0371361118566863e-006;
	(*HCHt)(13,13) = 7.024991409575548e-005;
	(*HCHt)(13,14) = 4.749834757924254e-006;
	(*HCHt)(13,15) = -3.4246067483125659e-006;
	(*HCHt)(14, 0) = 0;
	(*HCHt)(14, 1) = 0;
	(*HCHt)(14, 2) = 0;
	(*HCHt)(14, 3) = 0;
	(*HCHt)(14, 4) = 0;
	(*HCHt)(14, 5) = 8.6338319022767194e-009;
	(*HCHt)(14, 6) = -1.7749942115993248e-009;
	(*HCHt)(14, 7) = -6.5906217261540902e-011;
	(*HCHt)(14, 8) = 7.1961798751286384e-009;
	(*HCHt)(14, 9) = 2.016714890447026e-008;
	(*HCHt)(14,10) = -5.7725592020145953e-007;
	(*HCHt)(14,11) = 2.3794026441112229e-005;
	(*HCHt)(14,12) = 1.2143141546752772e-005;
	(*HCHt)(14,13) = 4.7498347579242642e-006;
	(*HCHt)(14,14) = 6.0599243166315907e-005;
	(*HCHt)(14,15) = 7.4677104014104345e-006;
	(*HCHt)(15, 0) = 0;
	(*HCHt)(15, 1) = 0;
	(*HCHt)(15, 2) = 0;
	(*HCHt)(15, 3) = 0;
	(*HCHt)(15, 4) = 0;
	(*HCHt)(15, 5) = -1.2342675099707964e-010;
	(*HCHt)(15, 6) = -4.3201426346668623e-010;
	(*HCHt)(15, 7) = 8.5224220548311002e-009;
	(*HCHt)(15, 8) = -1.0553214707732758e-008;
	(*HCHt)(15, 9) = -2.951199226885018e-008;
	(*HCHt)(15,10) = -2.6121568520215946e-006;
	(*HCHt)(15,11) = 5.9700902633940878e-006;
	(*HCHt)(15,12) = 1.9538302894163935e-005;
	(*HCHt)(15,13) = -3.4246067483125621e-006;
	(*HCHt)(15,14) = 7.4677104014104133e-006;
	(*HCHt)(15,15) = 5.4786811573213588e-005;

	E->resize(size);
	(*E)[ 0]     = -1.078639261242742e-009;
	(*E)[ 1]     = 3.8628052700939719e-009;
	(*E)[ 2]     = 3.4365124678206738e-011;
	(*E)[ 3]     = 5.2439675317372814e-008;
	(*E)[ 4]     = -1.0881681666852216e-010;
	(*E)[ 5]     = -5.4598438617436962e-010;
	(*E)[ 6]     = 1.3895925000950715e-009;
	(*E)[ 7]     = -8.0260487492211929e-010;
	(*E)[ 8]     = 3.182259790575348e-008;
	(*E)[ 9]     = 1.5418919745158188e-008;
	(*E)[10]     = -0.0028349485130807293;
	(*E)[11]     = -0.00024345752383292049;
	(*E)[12]     = -6.8288003755851215e-005;
	(*E)[13]     = -0.0024687155316284442;
	(*E)[14]     = 0.00044509381981076065;
	(*E)[15]     = 0.00036473635193496473;

	mu->resize(size);
	(*mu)[ 0]    = 2.8797662206765437e-216;
	(*mu)[ 1]    = 0;
	(*mu)[ 2]    = 0;
	(*mu)[ 3]    = 0;
	(*mu)[ 4]    = 0.40000000000000002;
	(*mu)[ 5]    = 0.40000000000000002;
	(*mu)[ 6]    = -1.4568160835476641e+144;
	(*mu)[ 7]    = 1.8390630184083791e-314;
	(*mu)[ 8]    = 6.0068543373082122e-270;
	(*mu)[ 9]    = 1.3843286004736165e-295;
	(*mu)[10]    = -5.346561806265195e+235;
	(*mu)[11]    = -6.9835087708481601e-251;
	(*mu)[12]    = 1.6353690476886917e-295;
	(*mu)[13]    = 0;
	(*mu)[14]    = 2.1219957949177975e-314;
	(*mu)[15]    = -7.8459077160310495e+298;

	constraintTypes->resize(6);
	(*constraintTypes)[ 0] = MLCP_BILATERAL_3D_CONSTRAINT;
	(*constraintTypes)[ 1] = MLCP_BILATERAL_2D_CONSTRAINT;
	(*constraintTypes)[ 2] = MLCP_BILATERAL_3D_CONSTRAINT;
	(*constraintTypes)[ 3] = MLCP_BILATERAL_2D_CONSTRAINT;
	(*constraintTypes)[ 4] = MLCP_UNILATERAL_3D_FRICTIONAL_CONSTRAINT;
	(*constraintTypes)[ 5] = MLCP_UNILATERAL_3D_FRICTIONAL_CONSTRAINT;
}

void setGaussSeidelOutputs(Eigen::VectorXd* lambda)
{
	const int size = 16;

	lambda->resize(size);
	(*lambda)[ 0] = -0.080836084913972622;
	(*lambda)[ 1] = -0.26223731104011477;
	(*lambda)[ 2] = -0.18374150677203246;
	(*lambda)[ 3] = -0.077148138493640786;
	(*lambda)[ 4] = 0.00011316190840491921;
	(*lambda)[ 5] = 6.5804169707683497;
	(*lambda)[ 6] = -2.1186332046610241;
	(*lambda)[ 7] = 5.7403838888910892;
	(*lambda)[ 8] = -0.18883274186185561;
	(*lambda)[ 9] = -0.05530115251517391;
	(*lambda)[10] = 24.309512511537893;
	(*lambda)[11] = 1.4775577619944267;
	(*lambda)[12] = 4.3566278655246844;
	(*lambda)[13] = 27.275211987031248;
	(*lambda)[14] = -10.073699584423007;
	(*lambda)[15] = -4.1893349010069185;
}

static MlcpTestData problem;

const MlcpTestData* getTestProblem1()
{
	setProblemInputs(&problem.HCHt, &problem.E, &problem.mu, &problem.constraintTypes);
	setGaussSeidelOutputs(&problem.expectedLambda);
	return &problem;
}
